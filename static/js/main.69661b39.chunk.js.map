{"version":3,"sources":["components/NavBar.tsx","api/quotes.ts","components/QuoteForm.tsx","components/Spinner.tsx","pages/EditQuotePage.tsx","pages/NewQuotePage.tsx","components/QuoteCard.tsx","pages/QuotesPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","title","flexGrow","withRouter","classes","history","useHistory","AppBar","position","Toolbar","Box","className","Button","color","onClick","push","Typography","variant","IconButton","quotesUrl","process","quoteUrl","id","processRequest","responsePromise","a","response","success","data","message","getQuotes","axios","get","getQuote","createQuote","content","authorName","post","editQuote","put","deleteQuote","delete","theme","root","width","marginLeft","marginRight","padding","spacing","header","textAlign","form","marginTop","button","QuoteForm","handleSubmit","action","initialAuthorName","initialContent","useState","setAuthorName","setContent","Card","noValidate","autoComplete","TextField","label","required","fullWidth","onChange","event","target","value","multiline","display","flexDirection","alignItems","spinner","marginBottom","centerBox","top","left","transform","Spinner","text","CircularProgress","CenteredSpinner","props","quoteId","match","params","quote","setQuote","isLoading","setIsLoading","enqueueSnackbar","useSnackbar","useEffect","then","result","cardContent","margin","handleEdit","handleDelete","raised","CardContent","gutterBottom","align","CardActions","quotesBox","quotes","setQuotes","length","map","key","to","body","App","maxSnack","basename","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.69661b39.chunk.js","sourcesContent":["import {\n  AppBar,\n  Box,\n  Button,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport React from \"react\";\nimport { useHistory, withRouter } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  title: {\n    flexGrow: 1,\n  },\n});\n\nconst NavBar: React.FC = () => {\n  const classes = useStyles();\n\n  let history = useHistory();\n  const gotoNewQuotePage = () => {\n    history.push(\"/new\");\n  };\n\n  const gotoHomePage = () => {\n    history.push(\"/\");\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Box className={classes.title}>\n          <Button color=\"inherit\" onClick={gotoHomePage}>\n            <Typography variant=\"h6\">Quotes</Typography>\n          </Button>\n        </Box>\n        <IconButton color=\"inherit\" onClick={gotoNewQuotePage}>\n          <AddIcon />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default withRouter(NavBar);\n","import axios, { AxiosResponse } from \"axios\";\nimport { Quote } from \"../types\";\n\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst quotesUrl = `${baseUrl}/quotes`;\nconst quoteUrl = (id: number | string) => `${quotesUrl}/${id}`;\n\nexport type RequestResult<T> =\n  | ({ success: true } & { data: T })\n  | ({ success: false } & { message: string });\n\nconst processRequest = async <T>(\n  responsePromise: Promise<AxiosResponse<T>>\n): Promise<RequestResult<T>> => {\n  try {\n    const response = await responsePromise;\n    return { success: true, data: response.data };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.response?.message ?? error.message,\n    };\n  }\n};\n\nexport const getQuotes = async (): Promise<\n  RequestResult<{ quotes: Quote[] }>\n> => {\n  return await processRequest(axios.get(quotesUrl));\n};\n\nexport const getQuote = async (\n  id: number | string\n): Promise<RequestResult<{ quote: Quote }>> => {\n  return await processRequest(axios.get(quoteUrl(id)));\n};\n\nexport const createQuote = async (\n  content: string,\n  authorName: string\n): Promise<RequestResult<{ quote: Quote }>> => {\n  return await processRequest(axios.post(quotesUrl, { content, authorName }));\n};\n\nexport const editQuote = async (\n  id: number | string,\n  content: string,\n  authorName: string\n): Promise<RequestResult<{ quote: Quote }>> => {\n  return await processRequest(axios.put(quoteUrl(id), { content, authorName }));\n};\n\nexport const deleteQuote = async (\n  id: number | string\n): Promise<RequestResult<void>> => {\n  return processRequest(axios.delete(quoteUrl(id)));\n};\n","import {\n  Box,\n  Button,\n  Card,\n  makeStyles,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"80%\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    padding: theme.spacing(2),\n  },\n  header: {\n    textAlign: \"center\",\n  },\n  form: {\n    marginRight: theme.spacing(4),\n    marginLeft: theme.spacing(4),\n    \"& > *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  button: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport const QuoteForm: React.FC<{\n  header: string;\n  action: string;\n  initialAuthorName?: string;\n  initialContent?: string;\n  handleSubmit: (authorName: string, content: string) => void;\n}> = ({ handleSubmit, header, action, initialAuthorName, initialContent }) => {\n  const classes = useStyles();\n\n  const [authorName, setAuthorName] = useState(initialAuthorName || \"\");\n  const [content, setContent] = useState(initialContent || \"\");\n\n  return (\n    <Card className={classes.root}>\n      <Typography variant=\"h2\" className={classes.header}>\n        {header}\n      </Typography>\n\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          label=\"Author name\"\n          required\n          fullWidth\n          onChange={(event) => setAuthorName(event.target.value)}\n          value={authorName}\n        />\n        <TextField\n          label=\"Body\"\n          multiline\n          fullWidth\n          required\n          onChange={(event) => setContent(event.target.value)}\n          value={content}\n        />\n        <Box textAlign=\"center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => handleSubmit(authorName, content)}\n            className={classes.button}\n          >\n            {action}\n          </Button>\n        </Box>\n      </form>\n    </Card>\n  );\n};\n","import {\n  Box,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  spinner: {\n    marginBottom: theme.spacing(2),\n  },\n  centerBox: {\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}));\n\ntype Props = {\n  text: string;\n};\n\nexport const Spinner: React.FC<Props> = ({ text }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <CircularProgress className={classes.spinner} />\n      <Typography variant=\"h5\">{text}</Typography>\n    </div>\n  );\n};\n\nexport const CenteredSpinner: React.FC<Props> = ({ text }) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.centerBox}>\n      <Spinner text={text} />\n    </Box>\n  );\n};\n","import { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps, useHistory, withRouter } from \"react-router-dom\";\nimport { editQuote, getQuote } from \"../api/quotes\";\nimport { QuoteForm } from \"../components/QuoteForm\";\nimport { CenteredSpinner } from \"../components/Spinner\";\nimport { Quote } from \"../types\";\n\ntype Props = RouteComponentProps<{ quoteId: string }>;\n\nconst EditQuotePage: React.FC<Props> = (props) => {\n  const quoteId = props.match.params.quoteId;\n\n  const [quote, setQuote] = useState<Quote | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    getQuote(quoteId).then((result) => {\n      if (!result.success) {\n        enqueueSnackbar(`Something went wrong: ${result.message}`, {\n          variant: \"error\",\n        });\n        return;\n      }\n      setQuote(result.data.quote);\n      setIsLoading(false);\n    });\n  }, [enqueueSnackbar, quoteId]);\n\n  const history = useHistory();\n  const handleSubmit = async (authorName: string, content: string) => {\n    try {\n      await editQuote(quoteId, content, authorName);\n      history.push(\"/\");\n      enqueueSnackbar(\"Quote updated\", { variant: \"success\" });\n    } catch (err) {\n      enqueueSnackbar(`Something went wrong: ${err.message}`, {\n        variant: \"error\",\n      });\n    }\n  };\n\n  if (quote === null || isLoading) {\n    return <CenteredSpinner text=\"Loading...\" />;\n  }\n\n  return (\n    <QuoteForm\n      handleSubmit={handleSubmit}\n      header=\"Edit quote\"\n      action=\"Edit\"\n      initialAuthorName={quote.authorName}\n      initialContent={quote.content}\n    />\n  );\n};\n\nexport default withRouter(EditQuotePage);\n","import { useSnackbar } from \"notistack\";\nimport React from \"react\";\nimport { useHistory, withRouter } from \"react-router-dom\";\nimport { createQuote } from \"../api/quotes\";\nimport { QuoteForm } from \"../components/QuoteForm\";\n\nconst NewQuotePage: React.FC = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const history = useHistory();\n  const handleSubmit = async (authorName: string, content: string) => {\n    try {\n      await createQuote(content, authorName);\n      history.push(\"/\");\n      enqueueSnackbar(\"New quote created\", { variant: \"success\" });\n    } catch (err) {\n      enqueueSnackbar(`Something went wrong ${err.message}`, {\n        variant: \"error\",\n      });\n    }\n  };\n\n  return (\n    <QuoteForm\n      handleSubmit={handleSubmit}\n      header=\"Create new quote\"\n      action=\"Create\"\n    />\n  );\n};\n\nexport default withRouter(NewQuotePage);\n","import {\n  Card,\n  CardActions,\n  CardContent,\n  IconButton,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Quote } from \"../types\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardContent: {\n    margin: theme.spacing(2),\n  },\n}));\n\ntype Props = RouteComponentProps<void> & {\n  quote: Quote;\n  handleEdit: () => void;\n  handleDelete: () => void;\n};\n\nconst QuoteCard: React.FC<Props> = ({ quote, handleEdit, handleDelete }) => {\n  const { authorName, content } = quote;\n  const classes = useStyles();\n\n  return (\n    <Card raised>\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"h2\" gutterBottom>\n          {`${content}`}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"right\"\n        >{`- ${authorName}`}</Typography>\n      </CardContent>\n\n      <CardActions>\n        <IconButton onClick={handleEdit}>\n          <EditIcon />\n        </IconButton>\n        <IconButton onClick={handleDelete}>\n          <DeleteIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withRouter(QuoteCard);\n","import { Box, makeStyles, Typography } from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, withRouter } from \"react-router-dom\";\nimport { deleteQuote, getQuotes } from \"../api/quotes\";\nimport QuoteCard from \"../components/QuoteCard\";\nimport { CenteredSpinner } from \"../components/Spinner\";\nimport { Quote } from \"../types\";\n\nconst useStyles = makeStyles((theme) => ({\n  quotesBox: {\n    width: \"80%\",\n    margin: \"0 auto\",\n    \"& > *\": {\n      marginBottom: theme.spacing(4),\n    },\n  },\n  centerBox: {\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}));\n\nconst QuotesPage: React.FC = () => {\n  const classes = useStyles();\n\n  const [quotes, setQuotes] = useState<Quote[] | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const handleEdit = (id: number | string) => {\n    history.push(`/edit/${id}`);\n  };\n  const handleDelete = async (id: number | string) => {\n    try {\n      await deleteQuote(id);\n      enqueueSnackbar(\"Quote deleted\");\n      // Force the page to refresh\n      setIsLoading(true);\n    } catch (err) {\n      enqueueSnackbar(`Something went wrong: ${err.message}`, {\n        variant: \"error\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!isLoading) {\n      return;\n    }\n    getQuotes().then((result) => {\n      setIsLoading(false);\n      if (!result.success) {\n        enqueueSnackbar(`Something went wrong: ${result.message}`, {\n          variant: \"error\",\n        });\n        return;\n      }\n      setQuotes(result.data.quotes);\n    });\n  }, [enqueueSnackbar, isLoading, setIsLoading]);\n\n  if (quotes === null || isLoading) {\n    return <CenteredSpinner text=\"Loading...\" />;\n  }\n\n  if (!quotes.length) {\n    return (\n      <Box className={classes.centerBox}>\n        <Typography variant=\"h4\" align=\"center\">\n          No quotes yet.\n        </Typography>\n        <Link to=\"/new\">\n          <Typography variant=\"h5\" align=\"center\">\n            Create one\n          </Typography>\n        </Link>\n      </Box>\n    );\n  }\n\n  return (\n    <Box className={classes.quotesBox}>\n      {quotes.map((quote) => (\n        <QuoteCard\n          key={quote.id}\n          quote={quote}\n          handleEdit={() => handleEdit(quote.id)}\n          handleDelete={() => handleDelete(quote.id)}\n        />\n      ))}\n    </Box>\n  );\n};\n\nexport default withRouter(QuotesPage);\n","import { Box, makeStyles } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport EditQuotePage from \"./pages/EditQuotePage\";\nimport NewQuotePage from \"./pages/NewQuotePage\";\nimport QuotesPage from \"./pages/QuotesPage\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    marginTop: theme.spacing(8),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <SnackbarProvider maxSnack={5}>\n      <Router basename=\"/cs3219-otot-task-b-frontend\">\n        <NavBar />\n        <Box className={classes.body}>\n          <Switch>\n            <Route exact path=\"/\">\n              <QuotesPage />\n            </Route>\n            <Route exact path=\"/new\">\n              <NewQuotePage />\n            </Route>\n            <Route exact path=\"/edit/:quoteId\">\n              <EditQuotePage />\n            </Route>\n          </Switch>\n        </Box>\n      </Router>\n    </SnackbarProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}