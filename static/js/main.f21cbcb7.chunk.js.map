{"version":3,"sources":["components/NavBar.tsx","api/quotes.ts","components/QuoteForm.tsx","components/Spinner.tsx","pages/EditQuotePage.tsx","pages/NewQuotePage.tsx","components/QuoteCard.tsx","pages/QuotesPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","fillerDiv","flexGrow","button","backgroundColor","quoteIcon","marginRight","spacing","withRouter","classes","history","useHistory","AppBar","Toolbar","Button","color","onClick","push","disableRipple","disableFocusRipple","disableElevation","className","Typography","variant","IconButton","quotesUrl","process","quoteUrl","id","processRequest","responsePromise","a","response","success","data","message","getQuotes","axios","get","getQuote","createQuote","content","authorName","post","editQuote","put","deleteQuote","delete","root","width","marginLeft","padding","header","textAlign","form","marginTop","QuoteForm","onSubmit","action","initialAuthorName","initialContent","useState","setAuthorName","setContent","submitting","setSubmitting","useSnackbar","enqueueSnackbar","closeSnackbar","handleSubmit","key","successful","Card","noValidate","autoComplete","TextField","label","required","fullWidth","onChange","event","target","value","multiline","Box","disabled","length","display","flexDirection","alignItems","spinner","marginBottom","centerBox","position","top","left","transform","Spinner","text","CircularProgress","CenteredSpinner","props","quoteId","match","params","quote","setQuote","isLoading","setIsLoading","useEffect","then","result","cardContent","margin","handleEdit","handleDelete","deleting","setDeleting","onDelete","deleteSuccessful","raised","fontSize","CardContent","gutterBottom","align","CardActions","quotesBox","quotes","setQuotes","map","to","body","App","maxSnack","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f21cbcb7.chunk.js","sourcesContent":["import {\n  AppBar,\n  Button,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport QuoteIcon from \"@material-ui/icons/FormatQuote\";\nimport React from \"react\";\nimport { useHistory, withRouter } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  fillerDiv: {\n    flexGrow: 1,\n  },\n  button: {\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  quoteIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst NavBar: React.FC = () => {\n  const classes = useStyles();\n\n  let history = useHistory();\n  const gotoNewQuotePage = () => {\n    history.push(\"/new\");\n  };\n\n  const gotoHomePage = () => {\n    history.push(\"/\");\n  };\n\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <Button\n            color=\"inherit\"\n            onClick={gotoHomePage}\n            disableRipple\n            disableFocusRipple\n            disableElevation\n            className={classes.button}\n          >\n            <QuoteIcon className={classes.quoteIcon} />\n            <Typography variant=\"h6\">Quotes</Typography>\n          </Button>\n          <div className={classes.fillerDiv}></div>\n          <IconButton color=\"inherit\" onClick={gotoNewQuotePage}>\n            <AddIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </>\n  );\n};\n\nexport default withRouter(NavBar);\n","import axios, { AxiosResponse } from \"axios\";\nimport { Quote } from \"../types\";\n\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\n\nconst quotesUrl = `${baseUrl}/quotes`;\nconst quoteUrl = (id: number | string) => `${quotesUrl}/${id}`;\n\nexport type RequestResult<T> =\n  | ({ success: true } & { data: T })\n  | ({ success: false } & { message: string });\n\nconst processRequest = async <T>(\n  responsePromise: Promise<AxiosResponse<T>>\n): Promise<RequestResult<T>> => {\n  try {\n    const response = await responsePromise;\n    return { success: true, data: response.data };\n  } catch (error) {\n    return {\n      success: false,\n      message: error.response?.message ?? error.message,\n    };\n  }\n};\n\nexport const getQuotes = async (): Promise<\n  RequestResult<{ quotes: Quote[] }>\n> => {\n  return await processRequest(axios.get(quotesUrl));\n};\n\nexport const getQuote = async (\n  id: number | string\n): Promise<RequestResult<{ quote: Quote }>> => {\n  return await processRequest(axios.get(quoteUrl(id)));\n};\n\nexport const createQuote = async (\n  content: string,\n  authorName: string\n): Promise<RequestResult<{ quote: Quote }>> => {\n  return await processRequest(axios.post(quotesUrl, { content, authorName }));\n};\n\nexport const editQuote = async (\n  id: number | string,\n  content: string,\n  authorName: string\n): Promise<RequestResult<{ quote: Quote }>> => {\n  return await processRequest(axios.put(quoteUrl(id), { content, authorName }));\n};\n\nexport const deleteQuote = async (\n  id: number | string\n): Promise<RequestResult<void>> => {\n  return processRequest(axios.delete(quoteUrl(id)));\n};\n","import {\n  Box,\n  Button,\n  Card,\n  makeStyles,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"80%\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    padding: theme.spacing(2),\n  },\n  header: {\n    textAlign: \"center\",\n  },\n  form: {\n    marginRight: theme.spacing(4),\n    marginLeft: theme.spacing(4),\n    \"& > *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  button: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport const QuoteForm: React.FC<{\n  header: string;\n  action: string;\n  initialAuthorName?: string;\n  initialContent?: string;\n  onSubmit: (authorName: string, content: string) => Promise<boolean>;\n}> = ({ onSubmit, header, action, initialAuthorName, initialContent }) => {\n  const classes = useStyles();\n\n  const [authorName, setAuthorName] = useState(initialAuthorName || \"\");\n  const [content, setContent] = useState(initialContent || \"\");\n  const [submitting, setSubmitting] = useState(false);\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    const key = enqueueSnackbar(\"Submitting...\");\n\n    const successful = await onSubmit(authorName, content);\n\n    closeSnackbar(key);\n    if (!successful) {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Card className={classes.root}>\n      <Typography variant=\"h2\" className={classes.header}>\n        {header}\n      </Typography>\n\n      <form noValidate autoComplete=\"off\" className={classes.form}>\n        <TextField\n          label=\"Author name\"\n          required\n          fullWidth\n          onChange={(event) => setAuthorName(event.target.value)}\n          value={authorName}\n        />\n        <TextField\n          label=\"Body\"\n          multiline\n          fullWidth\n          required\n          onChange={(event) => setContent(event.target.value)}\n          value={content}\n        />\n        <Box textAlign=\"center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleSubmit}\n            className={classes.button}\n            disabled={\n              submitting || authorName.length === 0 || content.length === 0\n            }\n          >\n            {action}\n          </Button>\n        </Box>\n      </form>\n    </Card>\n  );\n};\n","import {\n  Box,\n  CircularProgress,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  spinner: {\n    marginBottom: theme.spacing(2),\n  },\n  centerBox: {\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}));\n\ntype Props = {\n  text?: string;\n};\n\nexport const Spinner: React.FC<Props> = ({ text }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <CircularProgress className={classes.spinner} />\n      {text && <Typography variant=\"h5\">{text}</Typography>}\n    </div>\n  );\n};\n\nexport const CenteredSpinner: React.FC<Props> = ({ text }) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.centerBox}>\n      <Spinner text={text} />\n    </Box>\n  );\n};\n","import { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps, useHistory, withRouter } from \"react-router-dom\";\nimport { editQuote, getQuote } from \"../api/quotes\";\nimport { QuoteForm } from \"../components/QuoteForm\";\nimport { CenteredSpinner } from \"../components/Spinner\";\nimport { Quote } from \"../types\";\n\ntype Props = RouteComponentProps<{ quoteId: string }>;\n\nconst EditQuotePage: React.FC<Props> = (props) => {\n  const quoteId = props.match.params.quoteId;\n\n  const [quote, setQuote] = useState<Quote | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  useEffect(() => {\n    getQuote(quoteId).then((result) => {\n      if (!result.success) {\n        enqueueSnackbar(`Something went wrong: ${result.message}`, {\n          variant: \"error\",\n        });\n        return;\n      }\n      setQuote(result.data.quote);\n      setIsLoading(false);\n    });\n  }, [enqueueSnackbar, quoteId]);\n\n  const history = useHistory();\n  const handleSubmit = async (authorName: string, content: string) => {\n    try {\n      await editQuote(quoteId, content, authorName);\n      history.push(\"/\");\n      enqueueSnackbar(\"Quote updated\", { variant: \"success\" });\n      return true;\n    } catch (err) {\n      enqueueSnackbar(`Something went wrong: ${err.message}`, {\n        variant: \"error\",\n      });\n      return false;\n    }\n  };\n\n  if (quote === null || isLoading) {\n    return <CenteredSpinner text=\"Loading...\" />;\n  }\n\n  return (\n    <QuoteForm\n      onSubmit={handleSubmit}\n      header=\"Edit quote\"\n      action=\"Edit\"\n      initialAuthorName={quote.authorName}\n      initialContent={quote.content}\n    />\n  );\n};\n\nexport default withRouter(EditQuotePage);\n","import { useSnackbar } from \"notistack\";\nimport React from \"react\";\nimport { useHistory, withRouter } from \"react-router-dom\";\nimport { createQuote } from \"../api/quotes\";\nimport { QuoteForm } from \"../components/QuoteForm\";\n\nconst NewQuotePage: React.FC = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const history = useHistory();\n  const handleSubmit = async (authorName: string, content: string) => {\n    try {\n      await createQuote(content, authorName);\n      history.push(\"/\");\n      enqueueSnackbar(\"New quote created\", { variant: \"success\" });\n      return true;\n    } catch (err) {\n      enqueueSnackbar(`Something went wrong ${err.message}`, {\n        variant: \"error\",\n      });\n      return false;\n    }\n  };\n\n  return (\n    <QuoteForm\n      onSubmit={handleSubmit}\n      header=\"Create new quote\"\n      action=\"Create\"\n    />\n  );\n};\n\nexport default withRouter(NewQuotePage);\n","import {\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  IconButton,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport QuoteIcon from \"@material-ui/icons/FormatQuote\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { Quote } from \"../types\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardContent: {\n    margin: theme.spacing(2),\n  },\n}));\n\ntype Props = RouteComponentProps<void> & {\n  quote: Quote;\n  handleEdit: () => void;\n  handleDelete: () => Promise<boolean>;\n};\n\nconst QuoteCard: React.FC<Props> = ({ quote, handleEdit, handleDelete }) => {\n  const { authorName, content } = quote;\n  const classes = useStyles();\n\n  const [deleting, setDeleting] = useState(false);\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const onDelete = async () => {\n    setDeleting(true);\n    const key = enqueueSnackbar(\"Deleting...\");\n\n    const deleteSuccessful = await handleDelete();\n\n    closeSnackbar(key);\n    if (!deleteSuccessful) {\n      setDeleting(false);\n    }\n  };\n\n  return (\n    <Card raised>\n      <Box>\n        <QuoteIcon fontSize=\"large\" />\n      </Box>\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"h2\" gutterBottom>\n          {`${content}`}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"right\"\n        >{`- ${authorName}`}</Typography>\n      </CardContent>\n\n      <CardActions>\n        <IconButton onClick={handleEdit}>\n          <EditIcon />\n        </IconButton>\n        <IconButton onClick={onDelete} disabled={deleting}>\n          <DeleteIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withRouter(QuoteCard);\n","import { Box, makeStyles, Typography } from \"@material-ui/core\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, withRouter } from \"react-router-dom\";\nimport { deleteQuote, getQuotes } from \"../api/quotes\";\nimport QuoteCard from \"../components/QuoteCard\";\nimport { CenteredSpinner } from \"../components/Spinner\";\nimport { Quote } from \"../types\";\n\nconst useStyles = makeStyles((theme) => ({\n  quotesBox: {\n    width: \"80%\",\n    margin: \"0 auto\",\n    \"& > *\": {\n      marginBottom: theme.spacing(4),\n    },\n  },\n  centerBox: {\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n}));\n\nconst QuotesPage: React.FC = () => {\n  const classes = useStyles();\n\n  const [quotes, setQuotes] = useState<Quote[] | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const handleEdit = (id: number | string) => {\n    history.push(`/edit/${id}`);\n  };\n  const handleDelete = async (id: number | string) => {\n    try {\n      await deleteQuote(id);\n      enqueueSnackbar(\"Quote deleted\");\n      // Force the page to refresh\n      setIsLoading(true);\n      return true;\n    } catch (err) {\n      enqueueSnackbar(`Something went wrong: ${err.message}`, {\n        variant: \"error\",\n      });\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    if (!isLoading) {\n      return;\n    }\n    getQuotes().then((result) => {\n      setIsLoading(false);\n      if (!result.success) {\n        enqueueSnackbar(`Something went wrong: ${result.message}`, {\n          variant: \"error\",\n        });\n        return;\n      }\n      setQuotes(result.data.quotes);\n    });\n  }, [enqueueSnackbar, isLoading, setIsLoading]);\n\n  if (quotes === null || isLoading) {\n    return <CenteredSpinner text=\"Loading...\" />;\n  }\n\n  if (!quotes.length) {\n    return (\n      <Box className={classes.centerBox}>\n        <Typography variant=\"h4\" align=\"center\">\n          No quotes yet.\n        </Typography>\n        <Link to=\"/new\">\n          <Typography variant=\"h5\" align=\"center\">\n            Create one\n          </Typography>\n        </Link>\n      </Box>\n    );\n  }\n\n  return (\n    <Box className={classes.quotesBox}>\n      {quotes.map((quote) => (\n        <QuoteCard\n          key={quote.id}\n          quote={quote}\n          handleEdit={() => handleEdit(quote.id)}\n          handleDelete={() => handleDelete(quote.id)}\n        />\n      ))}\n    </Box>\n  );\n};\n\nexport default withRouter(QuotesPage);\n","import { Box, makeStyles } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\nimport EditQuotePage from \"./pages/EditQuotePage\";\nimport NewQuotePage from \"./pages/NewQuotePage\";\nimport QuotesPage from \"./pages/QuotesPage\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    marginTop: theme.spacing(8),\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <SnackbarProvider maxSnack={5}>\n      <Router>\n        <NavBar />\n        <Box className={classes.body}>\n          <Switch>\n            <Route exact path=\"/\">\n              <QuotesPage />\n            </Route>\n            <Route exact path=\"/new\">\n              <NewQuotePage />\n            </Route>\n            <Route exact path=\"/edit/:quoteId\">\n              <EditQuotePage />\n            </Route>\n          </Switch>\n        </Box>\n      </Router>\n    </SnackbarProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}